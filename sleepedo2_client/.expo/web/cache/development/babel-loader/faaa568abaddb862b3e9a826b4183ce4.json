{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Alden\\\\Documents\\\\Code\\\\javascript\\\\mobile\\\\sleepedo2main\\\\sleepedo2_client\\\\components\\\\chatbox.js\";\nimport React, { useState, useEffect, useContext, useCallback } from 'react';\nimport { SocketContext } from \"./socket\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TouchableOpacityBase } from \"react-native-web/dist/index\";\nexport default function Chatbox(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      dismissOpen = _useState2[0],\n      setDismissOpen = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dismissCount = _useState4[0],\n      setDismissCount = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      snoozeCount = _useState6[0],\n      setSnoozeCount = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      room = _useState8[0],\n      setRoom = _useState8[1];\n\n  var _useState9 = useState(''),\n      _useState10 = _slicedToArray(_useState9, 2),\n      alarmId = _useState10[0],\n      setAlarmId = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      disconnected = _useState12[0],\n      setDisconnected = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      modalOpen = _useState14[0],\n      setModalOpen = _useState14[1];\n\n  var socket = useContext(SocketContext);\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      text = _useState16[0],\n      setText = _useState16[1];\n\n  var getMessage = useCallback(function (message) {\n    console.log('received message: ', message);\n  }, []);\n  var triggered = useCallback(function (room, alarmId) {\n    console.log('joining room: ', room);\n    setRoom(room);\n    setAlarmId(alarmId);\n    setModalOpen(true);\n  }, []);\n  var resetStuff = useCallback(function () {\n    setModalOpen(false);\n    setDismissOpen(true);\n    setSnoozeCount(0);\n    setDismissCount(0);\n  }, []);\n  var disconnection = useCallback(function () {\n    setDisconnected(true);\n    setModalOpen(false);\n  }, []);\n  useEffect(function () {\n    socket.on('triggered', function (room, alarmId) {\n      triggered(room, alarmId);\n    });\n    socket.on('get-message', function (message) {\n      getMessage(message);\n    });\n    socket.on('get-snooze', function () {\n      setSnoozeCount(snoozeCount + 1);\n    });\n    socket.on('get-dismiss', function () {\n      setDismissCount(dismissCount + 1);\n    });\n    socket.on('snooze-begin', function () {\n      console.log('snooze for 9 minutes!');\n      resetStuff();\n    });\n    socket.on('dismiss-begin', function () {\n      console.log('both users have dismissed alarm!');\n    });\n    socket.on('room-disconnect', function () {\n      console.log('time up, disconnected from room');\n      resetStuff();\n      disconnection();\n    });\n    return function () {\n      socket.offAny();\n    };\n  }, [socket, getMessage, resetStuff, disconnection, triggered]);\n\n  function dismiss() {\n    setDismissCount(dismissCount + 1);\n    socket.emit('send-dismiss', room, alarmId);\n    setDismissOpen(false);\n  }\n\n  function snooze() {\n    setSnoozeCount(snoozeCount + 1);\n    socket.emit('send-snooze', room, alarmId);\n    setDismissOpen(false);\n  }\n\n  var sendText = useCallback(function (e) {\n    e.preventDefault();\n    socket.emit('send-message', sessionStorage.getItem('username'), text, room);\n    addOutTexts(text);\n    setText('');\n  }, [socket, text]);\n\n  if (modalOpen) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, React.createElement(View, {\n      style: styles.topbar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }));\n  } else return null;\n}\nvar styles = StyleSheet.create({\n  container: {\n    display: 'flex',\n    width: '100%',\n    height: '100%',\n    backgroundColor: '#222'\n  },\n  topbar: {\n    width: '100%',\n    height: 20,\n    backgroundColor: 'grey'\n  }\n});","map":{"version":3,"sources":["C:/Users/Alden/Documents/Code/javascript/mobile/sleepedo2main/sleepedo2_client/components/chatbox.js"],"names":["React","useState","useEffect","useContext","useCallback","SocketContext","TouchableOpacityBase","Chatbox","props","dismissOpen","setDismissOpen","dismissCount","setDismissCount","snoozeCount","setSnoozeCount","room","setRoom","alarmId","setAlarmId","disconnected","setDisconnected","modalOpen","setModalOpen","socket","text","setText","getMessage","message","console","log","triggered","resetStuff","disconnection","on","offAny","dismiss","emit","snooze","sendText","e","preventDefault","sessionStorage","getItem","addOutTexts","styles","container","topbar","StyleSheet","create","display","width","height","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useCallback } from 'react';\r\nimport { SocketContext } from './socket';\r\nimport { TouchableOpacity, StyleSheet, Text, TextInput, View, TouchableOpacityBase } from 'react-native';\r\n\r\n\r\n\r\n\r\nexport default function Chatbox(props) {\r\n\r\n    const [dismissOpen, setDismissOpen] = useState(false);\r\n    const [dismissCount, setDismissCount] = useState(0);\r\n    const [snoozeCount, setSnoozeCount] = useState(0);\r\n    const [room, setRoom] = useState('');\r\n    const [alarmId, setAlarmId] = useState('');\r\n    const [disconnected, setDisconnected] = useState(false);\r\n    const [modalOpen, setModalOpen] = useState(true);\r\n    const socket = useContext(SocketContext);\r\n    const [text, setText] = useState('');\r\n\r\n\r\n    const getMessage = useCallback((message) => {\r\n        console.log('received message: ', message);\r\n\r\n    }, []);\r\n\r\n    const triggered = useCallback((room, alarmId) => {\r\n        console.log('joining room: ', room);\r\n        setRoom(room);\r\n        setAlarmId(alarmId);\r\n        setModalOpen(true);\r\n    }, []);\r\n\r\n    const resetStuff = useCallback(() => {\r\n        setModalOpen(false);\r\n        setDismissOpen(true);\r\n        setSnoozeCount(0);\r\n        setDismissCount(0);\r\n    }, []);\r\n\r\n    const disconnection = useCallback(() => {\r\n        setDisconnected(true);\r\n        setModalOpen(false);\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        socket.on('triggered', (room, alarmId) => {\r\n            triggered(room, alarmId);\r\n        });\r\n        socket.on('get-message', (message) => {\r\n            getMessage(message);\r\n        });\r\n        socket.on('get-snooze', () => {\r\n            setSnoozeCount(snoozeCount + 1);  //other user hit snooze\r\n        })\r\n        socket.on('get-dismiss', () => {\r\n            setDismissCount(dismissCount + 1); //other user hit dismiss\r\n        })\r\n        socket.on('snooze-begin', () => {\r\n            console.log('snooze for 9 minutes!');\r\n            resetStuff();\r\n        })\r\n        socket.on('dismiss-begin', () => {\r\n            console.log('both users have dismissed alarm!');\r\n        })\r\n        socket.on('room-disconnect', () => {\r\n            console.log('time up, disconnected from room');\r\n            resetStuff();\r\n            disconnection();\r\n        })\r\n        return () => {\r\n            socket.offAny();\r\n        }\r\n    }, [socket, getMessage, resetStuff, disconnection, triggered])\r\n\r\n\r\n\r\n    function dismiss() {\r\n        setDismissCount(dismissCount + 1);\r\n        socket.emit('send-dismiss', room, alarmId);\r\n        setDismissOpen(false);\r\n    }\r\n    function snooze() {\r\n        setSnoozeCount(snoozeCount + 1);\r\n        socket.emit('send-snooze', room, alarmId);   //tell other user that you hit snooze\r\n        setDismissOpen(false);\r\n    }\r\n\r\n    const sendText = useCallback((e) => {\r\n        e.preventDefault();\r\n        socket.emit('send-message', sessionStorage.getItem('username'), text, room);   //when modal is closed this function is called\r\n        addOutTexts(text);\r\n        setText('');\r\n\r\n    }, [socket, text]);\r\n\r\n    // let dismissButton;\r\n    // if (dismissOpen) {\r\n    //     dismissButton =\r\n    //         <View style={{ display: 'flex', flexDirection: 'row', justifyContent: 'center', position: 'relative', zIndex: 4 }}>\r\n    //             <TouchableOpacity onPress={snooze}>\r\n    //                 <Text>Vote Snooze {`(${snoozeCount}/2)`}</Text>\r\n    //             </TouchableOpacity>\r\n    //             <TouchableOpacity onPress={dismiss}>\r\n    //                 <Text>Dismiss {`(${dismissCount}/2)`}</Text>\r\n    //             </TouchableOpacity>\r\n    //         </View>\r\n    // }\r\n\r\n    if (modalOpen) {\r\n        return (\r\n            <View style={styles.container}>\r\n                <View style={styles.topbar}></View>\r\n                {/* <View style={styles.topBar}>\r\n                    <Text style={styles.topBarText}>Chat - Rainbow69</Text>\r\n                    {dismissButton}\r\n                </View>\r\n                <View id='chatbox' style={styles.chatbox}>\r\n                </View>\r\n\r\n                <View style={styles.bottomContainer}>\r\n                    <TextInput value={text} placeholder='Write a message..' style={styles.textfield} onChange={(e) => setText(e.target.value)}></TextInput>\r\n                    <TouchableOpacity onPress={sendText} style={styles.sendButton}><Text>Send</Text></TouchableOpacity>\r\n                </View> */}\r\n\r\n            </View>\r\n        )\r\n    }\r\n    else return null;\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: '#222'\r\n    },\r\n    topbar: {\r\n        width: '100%',\r\n        height: 20,\r\n        backgroundColor: 'grey',\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}