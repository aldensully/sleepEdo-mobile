{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Alden\\\\Documents\\\\Code\\\\javascript\\\\mobile\\\\sleepedo2main\\\\sleepedo2_client\\\\node_modules\\\\react-native-modern-datepicker\\\\src\\\\datePicker\\\\components\\\\Days.js\";\n\nimport React, { useState, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useCalendar } from \"../DatePicker\";\n\nvar Days = function Days() {\n  var _useCalendar = useCalendar(),\n      options = _useCalendar.options,\n      state = _useCalendar.state,\n      utils = _useCalendar.utils,\n      onDateChange = _useCalendar.onDateChange;\n\n  var _state = _slicedToArray(state, 2),\n      mainState = _state[0],\n      setMainState = _state[1];\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      itemSize = _useState2[0],\n      setItemSize = _useState2[1];\n\n  var style = styles(options);\n  var days = useMemo(function () {\n    return utils.getMonthDays(mainState.activeDate);\n  });\n\n  var onSelectDay = function onSelectDay(date) {\n    setMainState({\n      type: 'set',\n      selectedDate: date\n    });\n    onDateChange(utils.getFormated(utils.getDate(date), 'dateFormat'));\n  };\n\n  var changeItemHeight = function changeItemHeight(_ref) {\n    var nativeEvent = _ref.nativeEvent;\n    var width = nativeEvent.layout.width;\n    !itemSize && setItemSize((width / 7).toFixed(2) * 1 - 0.5);\n  };\n\n  return React.createElement(View, {\n    style: [style.container, utils.flexDirection],\n    onLayout: changeItemHeight,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, days.map(function (day, n) {\n    return React.createElement(View, {\n      key: n,\n      style: {\n        width: itemSize,\n        height: itemSize\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, day && React.createElement(TouchableOpacity, {\n      style: [style.dayItem, {\n        borderRadius: itemSize / 2\n      }, mainState.selectedDate === day.date && style.dayItemSelected],\n      onPress: function onPress() {\n        return !day.disabled && onSelectDay(day.date);\n      },\n      activeOpacity: 0.8,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: [style.dayText, mainState.selectedDate === day.date && style.dayTextSelected, day.disabled && style.dayTextDisabled],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }, day.dayString)));\n  }));\n};\n\nvar styles = function styles(theme) {\n  return StyleSheet.create({\n    container: {\n      width: '100%',\n      height: '100%',\n      flexWrap: 'wrap'\n    },\n    dayItem: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      margin: 3\n    },\n    dayItemSelected: {\n      backgroundColor: theme.mainColor\n    },\n    dayText: {\n      fontFamily: theme.defaultFont,\n      fontSize: theme.textFontSize,\n      color: theme.textDefaultColor,\n      textAlign: 'center',\n      width: '100%'\n    },\n    dayTextSelected: {\n      color: theme.selectedTextColor,\n      fontFamily: theme.headerFont\n    },\n    dayTextDisabled: {\n      opacity: 0.2\n    }\n  });\n};\n\nexport { Days };","map":{"version":3,"sources":["C:/Users/Alden/Documents/Code/javascript/mobile/sleepedo2main/sleepedo2_client/node_modules/react-native-modern-datepicker/src/datePicker/components/Days.js"],"names":["React","useState","useMemo","useCalendar","Days","options","state","utils","onDateChange","mainState","setMainState","itemSize","setItemSize","style","styles","days","getMonthDays","activeDate","onSelectDay","date","type","selectedDate","getFormated","getDate","changeItemHeight","nativeEvent","width","layout","toFixed","container","flexDirection","map","day","n","height","dayItem","borderRadius","dayItemSelected","disabled","dayText","dayTextSelected","dayTextDisabled","dayString","theme","StyleSheet","create","flexWrap","flex","justifyContent","alignItems","margin","backgroundColor","mainColor","fontFamily","defaultFont","fontSize","textFontSize","color","textDefaultColor","textAlign","selectedTextColor","headerFont","opacity"],"mappings":"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","sourcesContent":["import React, {useState, useMemo} from 'react';\nimport {View, Text, StyleSheet, TouchableOpacity} from 'react-native';\n\nimport {useCalendar} from '../DatePicker';\n\nconst Days = () => {\n  const {options, state, utils, onDateChange} = useCalendar();\n  const [mainState, setMainState] = state;\n  const [itemSize, setItemSize] = useState(0);\n  const style = styles(options);\n  const days = useMemo(() => utils.getMonthDays(mainState.activeDate));\n\n  const onSelectDay = date => {\n    setMainState({\n      type: 'set',\n      selectedDate: date,\n    });\n    onDateChange(utils.getFormated(utils.getDate(date), 'dateFormat'));\n  };\n\n  const changeItemHeight = ({nativeEvent}) => {\n    const {width} = nativeEvent.layout;\n    !itemSize && setItemSize((width / 7).toFixed(2) * 1 - 0.5);\n  };\n\n  return (\n    <View style={[style.container, utils.flexDirection]} onLayout={changeItemHeight}>\n      {days.map((day, n) => (\n        <View\n          key={n}\n          style={{\n            width: itemSize,\n            height: itemSize,\n          }}>\n          {day && (\n            <TouchableOpacity\n              style={[\n                style.dayItem,\n                {\n                  borderRadius: itemSize / 2,\n                },\n                mainState.selectedDate === day.date && style.dayItemSelected,\n              ]}\n              onPress={() => !day.disabled && onSelectDay(day.date)}\n              activeOpacity={0.8}>\n              <Text\n                style={[\n                  style.dayText,\n                  mainState.selectedDate === day.date && style.dayTextSelected,\n                  day.disabled && style.dayTextDisabled,\n                ]}>\n                {day.dayString}\n              </Text>\n            </TouchableOpacity>\n          )}\n        </View>\n      ))}\n    </View>\n  );\n};\n\nconst styles = theme =>\n  StyleSheet.create({\n    container: {\n      width: '100%',\n      height: '100%',\n      flexWrap: 'wrap',\n    },\n    dayItem: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      margin: 3,\n    },\n    dayItemSelected: {\n      backgroundColor: theme.mainColor,\n    },\n    dayText: {\n      fontFamily: theme.defaultFont,\n      fontSize: theme.textFontSize,\n      color: theme.textDefaultColor,\n      textAlign: 'center',\n      width: '100%',\n    },\n    dayTextSelected: {\n      color: theme.selectedTextColor,\n      fontFamily: theme.headerFont,\n    },\n    dayTextDisabled: {\n      opacity: 0.2,\n    },\n  });\n\nexport {Days};\n"]},"metadata":{},"sourceType":"module"}